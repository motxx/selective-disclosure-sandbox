import { ethers, keccak256 } from "ethers";
import { publicKeyToAddress } from "viem/utils";
import { hexToBin } from "./hex";
import {
  serialize,
  recoverAddress,
  computeAddress,
} from "@ethersproject/transactions";
import {
  hexlify,
  splitSignature,
  hexZeroPad,
  joinSignature,
} from "@ethersproject/bytes";
import { recoverPublicKey, computePublicKey } from "@ethersproject/signing-key";
import { verifyMessage } from "@ethersproject/wallet";
import { VerifierAction } from "lit_actions/src/types";
import jsonldStableStringify from "jsonld-stable-stringify";
import presentation from "../lit_actions/test/data/proof.json";

declare global {
  interface Window {
    ethereum?: any;
  }
}
/**
 * Web3 client connecting to MetaMask's infra nodes.
 */
export class Web3 {
  private constructor(
    public provider: ethers.BrowserProvider,
    public signer: ethers.JsonRpcSigner
  ) {}

  /**
   * Factory to create a client connected to the web3.
   * @returns A client instance connected to the web3.
   */
  public static async connectWallet(): Promise<Web3> {
    if (!window.ethereum) {
      throw new Error("Metamask not installed");
    }
    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();
    return new Web3(provider, signer);
  }

  /**
   * Gets the wallet address.
   * @returns A promise for the wallet address.
   */
  public async getAddress() {
    return await this.signer.getAddress();
  }

  static createMessage = (actions: VerifierAction[]) => {
    return (
      "Condition verifications:\n" +
      actions.map(
        (v) => `\nipfsId: ${v.ipfsId}\nparams: ${JSON.stringify(v.params, Object.keys(v.params).sort())}\n`
      )
    );
  };


  static verifySignatureTest = () => {
    /*
    const sig2 = {
      r: '972576a60901f81b3c57c645e0f9f62cc25e4e77fcb2dcdd02bed5e4c1385494',
      s: '75793fe564135352bb3c5bc741eb9384a754ca26e68904e1e71d3a148a5c14f6',
      recid: 0,
      signature: '0x972576a60901f81b3c57c645e0f9f62cc25e4e77fcb2dcdd02bed5e4c138549475793fe564135352bb3c5bc741eb9384a754ca26e68904e1e71d3a148a5c14f61b',
      publicKey: '041463c0d75c9d1a254a0750228079eb7129fce053eb3ebe663896006cbad8c8321aaf5470c54b2eb43a3452616fb733ead681ca42bf96d01d4b0da30940894beb',
      dataSigned: '436f6e646974696f6e20766572696669636174696f6e733a0a0a6970667349643a20516d634d7477654353614c5338546941737763415646634c5575534363466771354c6b74583845627a36507672790a706172616d733a207b2270726573656e746174696f6e223a227b5c2240636f6e746578745c223a5b5c2268747470733a2f2f773369642e6f72672f636974697a656e736869702f76315c222c5c2268747470733a2f2f773369642e6f72672f73656375726974792f6262732f76315c222c5c2268747470733a2f2f7777772e77332e6f72672f323031382f63726564656e7469616c732f76315c225d2c5c2263726564656e7469616c5375626a6563745c223a7b5c2266616d696c794e616d655c223a5c22534d4954485c222c5c2267656e6465725c223a5c224d616c655c222c5c22676976656e4e616d655c223a5c224a4f484e5c222c5c2269645c223a5c226469643a6578616d706c653a6233346361366364333762626632335c222c5c22747970655c223a5b5c225065726d616e656e745265736964656e745c222c5c22506572736f6e5c225d7d2c5c226465736372697074696f6e5c223a5c22476f7665726e6d656e74206f66204578616d706c65205065726d616e656e74205265736964656e7420436172642e5c222c5c2265787069726174696f6e446174655c223a5c22323032392d31322d30335431323a31393a35325a5c222c5c2269645c223a5c2268747470733a2f2f6973737565722e6f6964702e75736369732e676f762f63726564656e7469616c732f38333632373436355c222c5c226964656e7469666965725c223a5c2238333632373436355c222c5c2269737375616e6365446174655c223a5c22323031392d31322d30335431323a31393a35325a5c222c5c226973737565725c223a5c226469643a6578616d706c653a3438393339383539335c222c5c226e616d655c223a5c225065726d616e656e74205265736964656e7420436172645c222c5c2270726f6f665c223a7b5c22637265617465645c223a5c22323032332d30342d31345430383a34313a34395a5c222c5c226e6f6e63655c223a5c22704b4a522f68516e753662776c382b42677a4a43743954424f597963782f746d424d776f2b625a55326b3846387255644777724b73506c7463567942534251425876733d5c222c5c2270726f6f66507572706f73655c223a5c22617373657274696f6e4d6574686f645c222c5c2270726f6f6656616c75655c223a5c2241426b422f776276694469797341424e376b4f502f67417477782f507573353072656e71506f624f757773634e79734d31586979764e724f336a38475262583776374d6e57636f416c362b2b306e36415271754f47506241494a595436733747666c5a7745376d547551332f716542616778486a7456534862483063613336555064327641364b516f474269556c6b3970323545616673706656736b313832756c48684433394447654247745367727a4e4e4a6a4e48545851642f55734575486b726d6a3248614541414141644c522f72374e4b566f694a4b476233656241764a484233567232384e3875372b447a573147573864366561616671325072313761645352725250732f3279415141414141414a5177337a44496434464d3964376a34447976324a45464e4c76794d6d6e62344b4833534170464868704e52477646314c6f6852675a5158474b315a556650454b35426d35465a553042474d7a797173534a58454336686742424d5166436663582b52744e4d3946486244726c7a52744b4e55475175705a70306d78496f564f527251477636546d3154365a334d2f4d3265416d4a76414141414352334d7056637171784b304b32314e4b5a7058516c695076586d6e333946472f762b576753386d3045526244474f49374731706730717137522b2f7672524a796b4e67304e30797247737a39456353496f7775774642456e69756a476f70726c784e4e466c394f39654e5a65627a75343164633036334655306b3477434a61556c326e38535446477579465536626f4133746d4c7879654d4b55704570495153635761514f512f4a6a6b746278414a642f33387533656d31424f7567355a69477934522f5064542f6570507a4b5158793663686a66706248484b7a746a417756766c4f3271534753364d3352666d79646138537a316d4c784d494b6d65703930427141463137354c5133754e386a6b504a466c754c694a636a4e364b4b33706d49666f386c3171594175624d3449787a6a755252614a7264704c3952727a49546a4e314f725541674b47584867514a464c354a4a38383774394f614b7739636f3649727542517755567a65536a6632656268585a53415a743346354633664474773d3d5c222c5c22747970655c223a5c22426273426c735369676e617475726550726f6f66323032305c222c5c22766572696669636174696f6e4d6574686f645c223a5c226469643a6578616d706c653a34383933393835393323746573745c227d2c5c22747970655c223a5b5c225065726d616e656e745265736964656e74436172645c222c5c2256657269666961626c6543726564656e7469616c5c225d7d227d0a2c0a6970667349643a20516d5755385a5547615470344c6473746d586f625a544c385466757a704667416f6a53414477596f78574b4631740a706172616d733a207b227468726573686f6c64223a31303030302c22766964656f4964223a22453335706f54577a575a41227d0a'
    };
    const sig1 = {
      r: '3a47ba3f20b86d83b4d0ac8534413fb4d45b0b36f7d93b53a2a61e6ab64dfacb',
      s: '71d54dfa1e57cee7010888dbcff9c4eaabf4247248546cf853523a1f0115ce9d',
      recid: 1,
      signature: '0x3a47ba3f20b86d83b4d0ac8534413fb4d45b0b36f7d93b53a2a61e6ab64dfacb71d54dfa1e57cee7010888dbcff9c4eaabf4247248546cf853523a1f0115ce9d1c',
      publicKey: '041463c0d75c9d1a254a0750228079eb7129fce053eb3ebe663896006cbad8c8321aaf5470c54b2eb43a3452616fb733ead681ca42bf96d01d4b0da30940894beb',
      dataSigned: '436f6e646974696f6e20766572696669636174696f6e733a0a0a6970667349643a20516d634d7477654353614c5338546941737763415646634c5575534363466771354c6b74583845627a36507672790a706172616d733a207b2270726573656e746174696f6e223a227b5c2240636f6e746578745c223a5b5c2268747470733a2f2f773369642e6f72672f636974697a656e736869702f76315c222c5c2268747470733a2f2f773369642e6f72672f73656375726974792f6262732f76315c222c5c2268747470733a2f2f7777772e77332e6f72672f323031382f63726564656e7469616c732f76315c225d2c5c2263726564656e7469616c5375626a6563745c223a7b5c2266616d696c794e616d655c223a5c22534d4954485c222c5c2267656e6465725c223a5c224d616c655c222c5c22676976656e4e616d655c223a5c224a4f484e5c222c5c2269645c223a5c226469643a6578616d706c653a6233346361366364333762626632335c222c5c22747970655c223a5b5c225065726d616e656e745265736964656e745c222c5c22506572736f6e5c225d7d2c5c226465736372697074696f6e5c223a5c22476f7665726e6d656e74206f66204578616d706c65205065726d616e656e74205265736964656e7420436172642e5c222c5c2265787069726174696f6e446174655c223a5c22323032392d31322d30335431323a31393a35325a5c222c5c2269645c223a5c2268747470733a2f2f6973737565722e6f6964702e75736369732e676f762f63726564656e7469616c732f38333632373436355c222c5c226964656e7469666965725c223a5c2238333632373436355c222c5c2269737375616e6365446174655c223a5c22323031392d31322d30335431323a31393a35325a5c222c5c226973737565725c223a5c226469643a6578616d706c653a3438393339383539335c222c5c226e616d655c223a5c225065726d616e656e74205265736964656e7420436172645c222c5c2270726f6f665c223a7b5c22637265617465645c223a5c22323032332d30342d31345430383a34313a34395a5c222c5c226e6f6e63655c223a5c22704b4a522f68516e753662776c382b42677a4a43743954424f597963782f746d424d776f2b625a55326b3846387255644777724b73506c7463567942534251425876733d5c222c5c2270726f6f66507572706f73655c223a5c22617373657274696f6e4d6574686f645c222c5c2270726f6f6656616c75655c223a5c2241426b422f776276694469797341424e376b4f502f67417477782f507573353072656e71506f624f757773634e79734d31586979764e724f336a38475262583776374d6e57636f416c362b2b306e36415271754f47506241494a595436733747666c5a7745376d547551332f716542616778486a7456534862483063613336555064327641364b516f474269556c6b3970323545616673706656736b313832756c48684433394447654247745367727a4e4e4a6a4e48545851642f55734575486b726d6a3248614541414141644c522f72374e4b566f694a4b476233656241764a484233567232384e3875372b447a573147573864366561616671325072313761645352725250732f3279415141414141414a5177337a44496434464d3964376a34447976324a45464e4c76794d6d6e62344b4833534170464868704e52477646314c6f6852675a5158474b315a556650454b35426d35465a553042474d7a797173534a58454336686742424d5166436663582b52744e4d3946486244726c7a52744b4e55475175705a70306d78496f564f527251477636546d3154365a334d2f4d3265416d4a76414141414352334d7056637171784b304b32314e4b5a7058516c695076586d6e333946472f762b576753386d3045526244474f49374731706730717137522b2f7672524a796b4e67304e30797247737a39456353496f7775774642456e69756a476f70726c784e4e466c394f39654e5a65627a75343164633036334655306b3477434a61556c326e38535446477579465536626f4133746d4c7879654d4b55704570495153635761514f512f4a6a6b746278414a642f33387533656d31424f7567355a69477934522f5064542f6570507a4b5158793663686a66706248484b7a746a417756766c4f3271534753364d3352666d79646138537a316d4c784d494b6d65703930427141463137354c5133754e386a6b504a466c754c694a636a4e364b4b33706d49666f386c3171594175624d3449787a6a755252614a7264704c3952727a49546a4e314f725541674b47584867514a464c354a4a38383774394f614b7739636f3649727542517755567a65536a6632656268585a53415a743346354633664474773d3d5c222c5c22747970655c223a5c22426273426c735369676e617475726550726f6f66323032305c222c5c22766572696669636174696f6e4d6574686f645c223a5c226469643a6578616d706c653a34383933393835393323746573745c227d2c5c22747970655c223a5b5c225065726d616e656e745265736964656e74436172645c222c5c2256657269666961626c6543726564656e7469616c5c225d7d227d0a2c0a6970667349643a20516d5755385a5547615470344c6473746d586f625a544c385466757a704667416f6a53414477596f78574b4631740a706172616d733a207b227468726573686f6c64223a31303030302c22766964656f4964223a22453335706f54577a575a41227d0a'
    };
    const sig = {
      r: '12c298328b2da1dd2433a77fcc93be736257d37b385ef63eac2d2822e2b7a97',
      s: 'ce4323d38a4ca65c8be54ebcd9aadcd340e260e728b8fbb88ae995b243e93d2',
      recid: 0,
      signature: '0x012c298328b2da1dd2433a77fcc93be736257d37b385ef63eac2d2822e2b7a970ce4323d38a4ca65c8be54ebcd9aadcd340e260e728b8fbb88ae995b243e93d21b',
      publicKey: '041463c0d75c9d1a254a0750228079eb7129fce053eb3ebe663896006cbad8c8321aaf5470c54b2eb43a3452616fb733ead681ca42bf96d01d4b0da30940894beb',
      dataSigned: '436f6e646974696f6e20766572696669636174696f6e733a0a0a6970667349643a20516d634d7477654353614c5338546941737763415646634c5575534363466771354c6b74583845627a36507672790a706172616d733a207b2270726573656e746174696f6e223a227b5c2240636f6e746578745c223a5b5c2268747470733a2f2f773369642e6f72672f636974697a656e736869702f76315c222c5c2268747470733a2f2f773369642e6f72672f73656375726974792f6262732f76315c222c5c2268747470733a2f2f7777772e77332e6f72672f323031382f63726564656e7469616c732f76315c225d2c5c2263726564656e7469616c5375626a6563745c223a7b5c2266616d696c794e616d655c223a5c22534d4954485c222c5c2267656e6465725c223a5c224d616c655c222c5c22676976656e4e616d655c223a5c224a4f484e5c222c5c2269645c223a5c226469643a6578616d706c653a6233346361366364333762626632335c222c5c22747970655c223a5b5c225065726d616e656e745265736964656e745c222c5c22506572736f6e5c225d7d2c5c226465736372697074696f6e5c223a5c22476f7665726e6d656e74206f66204578616d706c65205065726d616e656e74205265736964656e7420436172642e5c222c5c2265787069726174696f6e446174655c223a5c22323032392d31322d30335431323a31393a35325a5c222c5c2269645c223a5c2268747470733a2f2f6973737565722e6f6964702e75736369732e676f762f63726564656e7469616c732f38333632373436355c222c5c226964656e7469666965725c223a5c2238333632373436355c222c5c2269737375616e6365446174655c223a5c22323031392d31322d30335431323a31393a35325a5c222c5c226973737565725c223a5c226469643a6578616d706c653a3438393339383539335c222c5c226e616d655c223a5c225065726d616e656e74205265736964656e7420436172645c222c5c2270726f6f665c223a7b5c22637265617465645c223a5c22323032332d30342d31345430383a34313a34395a5c222c5c226e6f6e63655c223a5c22704b4a522f68516e753662776c382b42677a4a43743954424f597963782f746d424d776f2b625a55326b3846387255644777724b73506c7463567942534251425876733d5c222c5c2270726f6f66507572706f73655c223a5c22617373657274696f6e4d6574686f645c222c5c2270726f6f6656616c75655c223a5c2241426b422f776276694469797341424e376b4f502f67417477782f507573353072656e71506f624f757773634e79734d31586979764e724f336a38475262583776374d6e57636f416c362b2b306e36415271754f47506241494a595436733747666c5a7745376d547551332f716542616778486a7456534862483063613336555064327641364b516f474269556c6b3970323545616673706656736b313832756c48684433394447654247745367727a4e4e4a6a4e48545851642f55734575486b726d6a3248614541414141644c522f72374e4b566f694a4b476233656241764a484233567232384e3875372b447a573147573864366561616671325072313761645352725250732f3279415141414141414a5177337a44496434464d3964376a34447976324a45464e4c76794d6d6e62344b4833534170464868704e52477646314c6f6852675a5158474b315a556650454b35426d35465a553042474d7a797173534a58454336686742424d5166436663582b52744e4d3946486244726c7a52744b4e55475175705a70306d78496f564f527251477636546d3154365a334d2f4d3265416d4a76414141414352334d7056637171784b304b32314e4b5a7058516c695076586d6e333946472f762b576753386d3045526244474f49374731706730717137522b2f7672524a796b4e67304e30797247737a39456353496f7775774642456e69756a476f70726c784e4e466c394f39654e5a65627a75343164633036334655306b3477434a61556c326e38535446477579465536626f4133746d4c7879654d4b55704570495153635761514f512f4a6a6b746278414a642f33387533656d31424f7567355a69477934522f5064542f6570507a4b5158793663686a66706248484b7a746a417756766c4f3271534753364d3352666d79646138537a316d4c784d494b6d65703930427141463137354c5133754e386a6b504a466c754c694a636a4e364b4b33706d49666f386c3171594175624d3449787a6a755252614a7264704c3952727a49546a4e314f725541674b47584867514a464c354a4a38383774394f614b7739636f3649727542517755567a65536a6632656268585a53415a743346354633664474773d3d5c222c5c22747970655c223a5c22426273426c735369676e617475726550726f6f66323032305c222c5c22766572696669636174696f6e4d6574686f645c223a5c226469643a6578616d706c653a34383933393835393323746573745c227d2c5c22747970655c223a5b5c225065726d616e656e745265736964656e74436172645c222c5c2256657269666961626c6543726564656e7469616c5c225d7d227d0a2c0a6970667349643a20516d5755385a5547615470344c6473746d586f625a544c385466757a704667416f6a53414477596f78574b4631740a706172616d733a207b227468726573686f6c64223a31303030302c22766964656f4964223a22453335706f54577a575a41227d0a'
    }
    */
    const sig = {
      r: 'e195fc34c257d52a14a53e14612889d5695efcdeb8997dc36b45f794cc1d3b0c',
      s: '60f26eeb9b6868eb3d1e10e588e5943bbed14c984daa7ceab2ab2cb16813507f',
      recid: 0,
      signature: '0xe195fc34c257d52a14a53e14612889d5695efcdeb8997dc36b45f794cc1d3b0c60f26eeb9b6868eb3d1e10e588e5943bbed14c984daa7ceab2ab2cb16813507f1b',
      publicKey: '041463c0d75c9d1a254a0750228079eb7129fce053eb3ebe663896006cbad8c8321aaf5470c54b2eb43a3452616fb733ead681ca42bf96d01d4b0da30940894beb',
      dataSigned: '307866623937613161613162323538323933663364613261323838396533306330346261656434353535653437636235393734393332633431393232383237316461'
    };
    const sig1 = {
      r: 'd5571e8a390389d613c9cd237e5dbccf90ab3a91742b6c2e49c38f31c4a5bfe2',
      s: '33307de2c408385f522ffc91be11ce8362c3f588aa9f96a76828f6c42775c773',
      recid: 0,
      signature: '0xd5571e8a390389d613c9cd237e5dbccf90ab3a91742b6c2e49c38f31c4a5bfe233307de2c408385f522ffc91be11ce8362c3f588aa9f96a76828f6c42775c7731b',
      publicKey: '041463c0d75c9d1a254a0750228079eb7129fce053eb3ebe663896006cbad8c8321aaf5470c54b2eb43a3452616fb733ead681ca42bf96d01d4b0da30940894beb',
      dataSigned: '307866623937613161613162323538323933663364613261323838396533306330346261656434353535653437636235393734393332633431393232383237316461'
    };

    const dataSigned = `0x${sig.dataSigned}`;
    const encodedSig = joinSignature({
      r: "0x" + sig.r,
      s: "0x" + sig.s,
      v: sig.recid,
    });
    const encodedSigFromNodes = sig.signature;

    console.log("encodedSig", encodedSig);
    console.log(
      "encodedSig == encodedSigFromNodes",
      encodedSig == encodedSigFromNodes
    );

    const publicKey = `0x${sig.publicKey}`;
    const recoveredPubkey = recoverPublicKey(dataSigned, encodedSig);
    console.log("uncompressed recoveredPubkey", recoveredPubkey);
    console.log("recoveredPublicKey == publicKey", recoveredPubkey === publicKey);
  
    const ethAddress = computeAddress(publicKey);
    const recoveredAddress = recoverAddress(dataSigned, encodedSig);
    console.log("recoveredAddress", recoveredAddress);
    console.log(
      "recoveredAddress == ethAddress",
      recoveredAddress === ethAddress
    );
  
    const message = Web3.createMessage([
      {
        // verifyzk.action.js
        ipfsId: "QmcMtweCSaLS8TiAswcAVFcLUuSCcFgq5LktX8Ebz6Pvry",
        params: {
          presentation: jsonldStableStringify(presentation),
        },
      },
      {
        // youtubeviewcount.action.js
        ipfsId: "QmWU8ZUGaTp4LdstmXobZTL8TfuzpFgAojSADwYoxWKF1t",
        params: {
          videoId: "E35poTWzWZA",
          threshold: 10000,
        },
      },
    ]);
    console.log(message);

    const messageBytes = new TextEncoder().encode(message);
    const hashedMessage = keccak256(messageBytes);
    const toSign = new TextEncoder().encode(hashedMessage);

    const recoveredAddressViaMessage = verifyMessage(toSign, encodedSig);
    console.log("recoveredAddressViaMessage", recoveredAddressViaMessage);
    console.log(
      "recoverAddressViaMessage == ethAddress",
      recoveredAddressViaMessage === ethAddress
    );
    /*
    const recovered = ethers.verifyMessage(hexToBin(test.dataSigned), sig);
    console.log(test);
    const addr = publicKeyToAddress(`0x${test.publicKey}`);
    console.log({ recovered, pubkey: test.publicKey, addr });
    */
  };
}
